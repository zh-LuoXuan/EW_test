<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Sun Apr 28 18:59:43 2024
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Init_Cinfig &rArr; RGB_Init_Config &rArr; RGB_DataInit &rArr; RGB_Mode_Set &rArr; RGB_Mode_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[18]">Reserved_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">Reserved_IRQHandler</a><BR>
 <LI><a href="#[d]">ACMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">ACMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ACMP_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[c]">CCP_IRQHandler</a> from ym_ccp.o(.text.CCP_IRQHandler) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[13]">EPWM_IRQHandler</a> from ym_epwm.o(.text.EPWM_IRQHandler) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[1d]">FMC_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[16]">HALL_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[10]">I2C0_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[7]">INTP0_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[8]">INTP1_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[9]">INTP2_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[a]">INTP3_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[17]">LSITIMER_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[6]">LVI_IRQHandler</a> from system_cms32m67xx.o(.text.LVI_IRQHandler) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[18]">Reserved_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced 9 times from startup_cms32m67xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[f]">SSP0_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from bsp_systick.o(.text.SysTick_Handler) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_cms32m67xx.o(.text.SystemInit) referenced from startup_cms32m67xx.o(.text)
 <LI><a href="#[14]">TIMER0_IRQHandler</a> from ym_timer.o(.text.TIMER0_IRQHandler) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[15]">TIMER1_IRQHandler</a> from ym_timer.o(.text.TIMER1_IRQHandler) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[19]">TM00_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[b]">TM01H_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[1a]">TM01_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[1b]">TM02_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[1c]">TM03_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from startup_cms32m67xx.o(.text) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from ym_uart.o(.text.UART1_IRQHandler) referenced from startup_cms32m67xx.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cms32m67xx.o(.text)
 <LI><a href="#[1e]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[21]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[23]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[71]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[72]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[73]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[74]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[75]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Reserved_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>INTP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>INTP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>INTP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>INTP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>LSITIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TM00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TM01H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TM01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TM02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TM03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cms32m67xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigRunMode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init_Config
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[77]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>CCP0A_Init_Config</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ym_ccp.o(.text.CCP0A_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CCP0A_Init_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Start
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_EnableRun
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_ConfigCompare
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_EnableReverseOutput
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_ConfigCLK
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_EnablePWMMode
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER11PeriphClockCmd
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[2d]"></a>CCP_ClearCompareIntFlag</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ccp.o(.text.CCP_ClearCompareIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_ClearCompareIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_IRQHandler
</UL>

<P><STRONG><a name="[28]"></a>CCP_ConfigCLK</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ccp.o(.text.CCP_ConfigCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCP_ConfigCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP0A_Init_Config
</UL>

<P><STRONG><a name="[2a]"></a>CCP_ConfigCompare</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ccp.o(.text.CCP_ConfigCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCP_ConfigCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP0A_Init_Config
</UL>

<P><STRONG><a name="[2f]"></a>CCP_DisableRun</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ccp.o(.text.CCP_DisableRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_DisableRun
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_IRQHandler
</UL>

<P><STRONG><a name="[27]"></a>CCP_EnablePWMMode</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ccp.o(.text.CCP_EnablePWMMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_EnablePWMMode
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP0A_Init_Config
</UL>

<P><STRONG><a name="[29]"></a>CCP_EnableReverseOutput</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ccp.o(.text.CCP_EnableReverseOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CCP_EnableReverseOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP0A_Init_Config
</UL>

<P><STRONG><a name="[2b]"></a>CCP_EnableRun</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, ccp.o(.text.CCP_EnableRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_EnableRun
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Hook
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP0A_Init_Config
</UL>

<P><STRONG><a name="[c]"></a>CCP_IRQHandler</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ym_ccp.o(.text.CCP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CCP_IRQHandler &rArr; CCP_DisableRun
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_DisableRun
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Stop
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_ClearCompareIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CCP_Start</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ccp.o(.text.CCP_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Hook
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP0A_Init_Config
</UL>

<P><STRONG><a name="[2e]"></a>CCP_Stop</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ccp.o(.text.CCP_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CCP_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>CGC_PER10PeriphClockCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cgc.o(.text.CGC_PER10PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CGC_PER10PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[26]"></a>CGC_PER11PeriphClockCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cgc.o(.text.CGC_PER11PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CGC_PER11PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init_Config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init_Config
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP0A_Init_Config
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[68]"></a>CGC_PER12PeriphClockCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cgc.o(.text.CGC_PER12PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CGC_PER12PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init_Config
</UL>

<P><STRONG><a name="[5b]"></a>CLK_GetHocoFreq</STRONG> (Thumb, 208 bytes, Stack size 12 bytes, system_cms32m67xx.o(.text.CLK_GetHocoFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_GetHocoFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[30]"></a>DMA_CCP0A_Config</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ym_dma.o(.text.DMA_CCP0A_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_CCP0A_Config &rArr; DMA_Init &rArr; CGC_PER10PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Start
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[31]"></a>DMA_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_Init &rArr; CGC_PER10PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER10PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CCP0A_Config
</UL>

<P><STRONG><a name="[32]"></a>DMA_Start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dma.o(.text.DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CCP0A_Config
</UL>

<P><STRONG><a name="[3e]"></a>EPWM_AllBrakeDisable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, epwm.o(.text.EPWM_AllBrakeDisable))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[34]"></a>EPWM_ClearZeroIntFlag</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, epwm.o(.text.EPWM_ClearZeroIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_ClearZeroIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_IRQHandler
</UL>

<P><STRONG><a name="[37]"></a>EPWM_ConfigChannelClk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, epwm.o(.text.EPWM_ConfigChannelClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EPWM_ConfigChannelClk
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[38]"></a>EPWM_ConfigChannelPeriod</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, epwm.o(.text.EPWM_ConfigChannelPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EPWM_ConfigChannelPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[39]"></a>EPWM_ConfigChannelSymDuty</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, epwm.o(.text.EPWM_ConfigChannelSymDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EPWM_ConfigChannelSymDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[3d]"></a>EPWM_ConfigLoadAndIntMode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, epwm.o(.text.EPWM_ConfigLoadAndIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EPWM_ConfigLoadAndIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[36]"></a>EPWM_ConfigRunMode</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, epwm.o(.text.EPWM_ConfigRunMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_ConfigRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[3a]"></a>EPWM_DisableDeadZone</STRONG> (Thumb, 136 bytes, Stack size 4 bytes, epwm.o(.text.EPWM_DisableDeadZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_DisableDeadZone
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[3b]"></a>EPWM_DisableReverseOutput</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, epwm.o(.text.EPWM_DisableReverseOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_DisableReverseOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[3c]"></a>EPWM_EnableAutoLoadMode</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, epwm.o(.text.EPWM_EnableAutoLoadMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_EnableAutoLoadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[3f]"></a>EPWM_EnableOutput</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, epwm.o(.text.EPWM_EnableOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_EnableOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[13]"></a>EPWM_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ym_epwm.o(.text.EPWM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EPWM_IRQHandler &rArr; EPWM_ClearZeroIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ClearZeroIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EPWM_Init_Config</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, ym_epwm.o(.text.EPWM_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EPWM_Init_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Start
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableOutput
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_AllBrakeDisable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigLoadAndIntMode
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_EnableAutoLoadMode
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_DisableReverseOutput
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_DisableDeadZone
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigChannelSymDuty
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigChannelPeriod
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigChannelClk
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_ConfigRunMode
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER11PeriphClockCmd
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[40]"></a>EPWM_Start</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, epwm.o(.text.EPWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EPWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
</UL>

<P><STRONG><a name="[25]"></a>GPIO_Init</STRONG> (Thumb, 444 bytes, Stack size 36 bytes, gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP0A_Init_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init_Config
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Init_Config
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init_Config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init_Config
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init_Config
</UL>

<P><STRONG><a name="[41]"></a>GPIO_Init_Config</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ym_gpio.o(.text.GPIO_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Init_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[43]"></a>Init_Cinfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, init_config.o(.text.Init_Cinfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Init_Cinfig &rArr; RGB_Init_Config &rArr; RGB_DataInit &rArr; RGB_Mode_Set &rArr; RGB_Mode_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CCP0A_Config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init_Config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init_Config
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP0A_Init_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init_Config
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Init_Config
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPWM_Init_Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init_Config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init_Config
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init_Config
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>KEY_Init_Config</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ym_gpio.o(.text.KEY_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KEY_Init_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[46]"></a>LED_Init_Config</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ym_gpio.o(.text.LED_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LED_Init_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[6]"></a>LVI_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system_cms32m67xx.o(.text.LVI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LVI_IRQHandler &rArr; __NVIC_ClearPendingIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PORT_ClrBit</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gpio.o(.text.PORT_ClrBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORT_ClrBit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Power_Update
</UL>

<P><STRONG><a name="[42]"></a>PORT_SetBit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gpio.o(.text.PORT_SetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORT_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Power_Update
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Init_Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init_Config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init_Config
</UL>

<P><STRONG><a name="[4d]"></a>RGB_Breath_Update</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ym_rgb.o(.text.RGB_Breath_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RGB_Breath_Update &rArr; RGB_ColorRGB_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_ColorRGB_Update
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Hook
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_white_breathRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>RGB_ColorRGB_Update</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ym_rgb.o(.text.RGB_ColorRGB_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RGB_ColorRGB_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Hook
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGB_GRB_Camplar
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Breath_Update
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Status_Update
</UL>

<P><STRONG><a name="[52]"></a>RGB_Color_Update</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ym_rgb.o(.text.RGB_Color_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RGB_Color_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Hook
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGB_GRB_Camplar
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Status_Update
</UL>

<P><STRONG><a name="[47]"></a>RGB_Init_Config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ym_rgb.o(.text.RGB_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RGB_Init_Config &rArr; RGB_DataInit &rArr; RGB_Mode_Set &rArr; RGB_Mode_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_DataInit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[54]"></a>RGB_Mode_Set</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ym_rgb.o(.text.RGB_Mode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RGB_Mode_Set &rArr; RGB_Mode_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Mode_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_DataInit
</UL>

<P><STRONG><a name="[56]"></a>RGB_Mode_Update</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ym_rgb.o(.text.RGB_Mode_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RGB_Mode_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Hook
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGB_GRB_Camplar
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Mode_Set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Status_Update
</UL>

<P><STRONG><a name="[57]"></a>RGB_Power_Update</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ym_rgb.o(.text.RGB_Power_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RGB_Power_Update &rArr; Update_Hook &rArr; CCP_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ClrBit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Hook
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Status_Update
</UL>

<P><STRONG><a name="[55]"></a>RGB_Status_Update</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ym_rgb.o(.text.RGB_Status_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RGB_Status_Update &rArr; RGB_Mode_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Power_Update
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_ColorRGB_Update
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Color_Update
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Mode_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_DataInit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_systick.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_cms32m67xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; CLK_GetHocoFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHocoFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>Systick_Init_Config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_systick.o(.text.Systick_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Systick_Init_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[14]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ym_timer.o(.text.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER0_IRQHandler &rArr; TMR_ClearOverflowIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearOverflowIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIMER0_Init_Config</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ym_timer.o(.text.TIMER0_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_Init_Config &rArr; TMR0_Int_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_DisableOneShotMode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetPeriod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ConfigClk
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ConfigRunMode
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Int_Config
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER11PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[15]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ym_timer.o(.text.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIMER1_IRQHandler &rArr; RGB_Breath_Update &rArr; RGB_ColorRGB_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearOverflowIntFlag
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Breath_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIMER1_Init_Config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ym_timer.o(.text.TIMER1_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER1_Init_Config &rArr; TMR1_Int_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_DisableOneShotMode
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetPeriod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ConfigClk
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ConfigRunMode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_Int_Config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Start
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER11PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[62]"></a>TMR0_Int_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ym_timer.o(.text.TMR0_Int_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR0_Int_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableOverflowInt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init_Config
</UL>

<P><STRONG><a name="[64]"></a>TMR1_Int_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ym_timer.o(.text.TMR1_Int_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR1_Int_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Start
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_EnableOverflowInt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init_Config
</UL>

<P><STRONG><a name="[5d]"></a>TMR_ClearOverflowIntFlag</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, timer.o(.text.TMR_ClearOverflowIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TMR_ClearOverflowIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>TMR_ConfigClk</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer.o(.text.TMR_ConfigClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_ConfigClk
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init_Config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init_Config
</UL>

<P><STRONG><a name="[5e]"></a>TMR_ConfigRunMode</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, timer.o(.text.TMR_ConfigRunMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_ConfigRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init_Config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init_Config
</UL>

<P><STRONG><a name="[61]"></a>TMR_DisableOneShotMode</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, timer.o(.text.TMR_DisableOneShotMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TMR_DisableOneShotMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init_Config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init_Config
</UL>

<P><STRONG><a name="[65]"></a>TMR_EnableOverflowInt</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, timer.o(.text.TMR_EnableOverflowInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TMR_EnableOverflowInt
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_Int_Config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Int_Config
</UL>

<P><STRONG><a name="[60]"></a>TMR_SetPeriod</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text.TMR_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_SetPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init_Config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init_Config
</UL>

<P><STRONG><a name="[63]"></a>TMR_Start</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, timer.o(.text.TMR_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TMR_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_Int_Config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Int_Config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Init_Config
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Init_Config
</UL>

<P><STRONG><a name="[45]"></a>Touch_Init_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ym_gpio.o(.text.Touch_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Touch_Init_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ym_uart.o(.text.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_cms32m67xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART1_Init_Config</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ym_uart.o(.text.UART1_Init_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART1_Init_Config &rArr; UART_ConfigRunMode &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableRBRInt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigRunMode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGC_PER12PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>

<P><STRONG><a name="[69]"></a>UART_ConfigRunMode</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, uart.o(.text.UART_ConfigRunMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_ConfigRunMode &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init_Config
</UL>

<P><STRONG><a name="[6a]"></a>UART_EnableRBRInt</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, uart.o(.text.UART_EnableRBRInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_EnableRBRInt
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init_Config
</UL>

<P><STRONG><a name="[50]"></a>Update_Hook</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ym_rgb.o(.text.Update_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Update_Hook &rArr; CCP_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_Start
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP_EnableRun
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Breath_Update
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Power_Update
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_ColorRGB_Update
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Color_Update
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Mode_Update
</UL>

<P><STRONG><a name="[6f]"></a>get_Uart1_RxData</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ym_uart.o(.text.get_Uart1_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_Uart1_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>limit_int16</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, userlib.o(.text.limit_int16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = limit_int16
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_white_breathRGB
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; Init_Cinfig &rArr; RGB_Init_Config &rArr; RGB_DataInit &rArr; RGB_Mode_Set &rArr; RGB_Mode_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Status_Update
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Uart1_RxData
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Cinfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[78]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[79]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[51]"></a>get_RGB_GRB_Camplar</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ym_rgb.o(.text.get_RGB_GRB_Camplar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CamplarBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_ColorRGB_Update
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Color_Update
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Mode_Update
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_DataInit
</UL>

<P><STRONG><a name="[4e]"></a>get_white_breathRGB</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, ym_rgb.o(.text.get_white_breathRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = get_white_breathRGB &rArr; limit_int16
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_int16
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Breath_Update
</UL>

<P><STRONG><a name="[6d]"></a>get_CamplarBuff</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, ym_rgb.o(.text.get_CamplarBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_CamplarBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGB_GRB_Camplar
</UL>

<P><STRONG><a name="[53]"></a>RGB_DataInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ym_rgb.o(.text.RGB_DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RGB_DataInit &rArr; RGB_Mode_Set &rArr; RGB_Mode_Update &rArr; get_RGB_GRB_Camplar &rArr; get_CamplarBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Mode_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGB_GRB_Camplar
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Status_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Init_Config
</UL>

<P><STRONG><a name="[66]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, ym_timer.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_Int_Config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Int_Config
</UL>

<P><STRONG><a name="[67]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ym_timer.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_Int_Config
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Int_Config
</UL>

<P><STRONG><a name="[6b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ym_uart.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init_Config
</UL>

<P><STRONG><a name="[6c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, ym_uart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init_Config
</UL>

<P><STRONG><a name="[59]"></a>SysTick_Config</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_systick.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init_Config
</UL>

<P><STRONG><a name="[5a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bsp_systick.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[4c]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, system_cms32m67xx.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVI_IRQHandler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
